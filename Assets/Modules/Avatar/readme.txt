
### ระบบ AvatarBoard และ AvatarController

**วัตถุประสงค์:**
ระบบนี้เน้นที่การส่งข้อมูลและปรับปรุงสถานะของ Avatar ในเกม, โดยใช้วิธีการของ Observer Design Pattern เพื่อประสานสถานะข้อมูลในระบบอย่างมีประสิทธิภาพและลดการพึ่งพาข้อมูลตามหลักการ Decoupling.

**ส่วนประกอบหลัก:**
1. * *IAvatarBoard(Interface):**
    -ควบคุมและจัดการข้อมูล Avatar ในระดับโกลบอล.
    - สามารถส่งข้อมูลการเปลี่ยนแปลงไปยังทุก AvatarController ที่ทำหน้าที่เป็น Observer.

2. **IAvatarBoardObserver (Interface):**
    - ทำหน้าที่รับข้อมูลจาก IAvatarBoard และปรับเปลี่ยนสถานะของ AvatarController ตามข้อมูลที่ได้รับ.

3. **AvatarBoard (Class):**
    - โปรดหมายเหตุ: ควรจะทำการ Implement ตาม IAvatarBoard และจัดการข้อมูลการทำงานในระดับสูง (high-level) สำหรับการจัดการ Avatar ทั้งหมดในระบบ.

4. **AvatarController (Class):**
    -จัดการสถานะการทำงานของ Avatar ในระดับต่ำ(low-level) โดยพิจารณาตามข้อมูลที่ได้รับจาก AvatarBoard.

**การทำงานของระบบ:**
1. **ลงทะเบียน Observer:**
    - ทุก AvatarController (ที่เป็น Observer) ต้องลงทะเบียนตัวเองกับ AvatarBoard เพื่อรับข้อมูลการอัพเดท.

2. **การอัพเดทสถานะ:**
    - เมื่อ AvatarBoard มีการเปลี่ยนแปลงข้อมูล Avatar, มันจะแจ้งการเปลี่ยนแปลงนี้ไปยังทุก AvatarController ที่ลงทะเบียนเป็น Observer.

3. **การปรับสถานะ Avatar:**
    - ทุก AvatarController ที่ได้รับข้อมูลการเปลี่ยนแปลงจะปรับสถานะของตัวเองตามข้อมูลที่ได้รับ.


** ประโยชน์ที่สำคัญ:**
- **Decoupling:**
    - ลดการพึ่งพาด้านความสัมพันธ์ข้อมูลระหว่างส่วนต่างๆ ในระบบ.
- **Centralized Management:**
    - การจัดการข้อมูล Avatar ในที่เดียว, ทำให้ง่ายต่อการดูแลรักษาและพัฒนาต่อยอด.
- **Scalability:**
    - รองรับการขยายตัวของระบบได้ง่ายเมื่อมี Avatar ที่เพิ่มเข้ามา.

---
การรองรับการขยายตัว (Scalability) ของระบบ Avatar ในบริบทนี้หมายถึง ความสามารถในการจัดการและสนับสนุน Avatar ที่เพิ่มเข้ามาเป็นจำนวนมากโดยไม่ส่งผลกระทบต่อประสิทธิภาพรวมของระบบหรือความซับซ้อนของการพัฒนาและดูแลรักษาระบบนั้นๆ ในกรณีนี้มีหลายวิธีที่ทำให้ระบบ Avatar สามารถขยายตัวได้ง่าย:

### 1. **Decoupling ผ่าน Observer Pattern:**
   - ข้อมูลและการจัดการข้อมูลถูกแยกตัว (decoupling) ผ่าน Observer Pattern ทำให้ระบบสามารถเพิ่มหรือลด Avatar ได้โดยไม่ต้องแก้ไข code ในส่วนอื่นๆ ของระบบ.
   - เพิ่ม Avatar ใหม่เข้ามาในระบบได้โดยไม่ต้องแตะต้องระบบข้อมูลในส่วนอื่นๆ เนื่องจาก Avatar จะทำหน้าที่เป็น Observer ที่เฉพาะเจาะจงเท่านั้น.

### 2. **Centralized Data Management:**
   - การจัดการข้อมูลทั้งหมดจากจุดกลาง (`AvatarBoard`) ทำให้การเพิ่ม Avatar ใหม่หรือการปรับปรุงสถานะข้อมูลสามารถทำได้อย่างมีประสิทธิภาพและคงที่.
   - จุดประสานข้อมูลส่วนกลาง (`AvatarBoard`) สามารถทำการปรับปรุงหรือขยายฟังก์ชันได้โดยไม่กระทบต่อ AvatarController ต่างๆ ทำให้ระบบสามารถขยายได้อย่างนุ่มนวล.

### 3. **Loose Coupling Between Components:**
   - ลดปัญหาภาระจากการพัฒนาหรือดูแลรักษาโดยทำให้แต่ละ AvatarController ทำงานอย่างอิสระ และไม่พึ่งพาต่อกันหรือต่อระบบหลักโดยตรง.
   - การที่แต่ละ AvatarController จัดการเฉพาะการเปลี่ยนแปลงของ Avatar ตัวเองทำให้การปรับปรุงหรือเพิ่ม Avatar ใหม่ไม่กระทบต่อระบบหรือ Avatar อื่นๆ.

### 4. **Uniform Interface:**
   - การใช้ Interface (`IAvatarBoard` และ `IAvatarBoardObserver`) ทำให้การพัฒนาเป็นมาตรฐานและเพิ่มประสิทธิภาพในการทดสอบและพัฒนาต่อยอด.
   - สามารถพัฒนา Avatar ที่มีความซับซ้อนหรือการทำงานที่แตกต่างกันได้โดยที่ยังคงมี Interface การทำงานที่เหมือนกัน.

ด้วยลักษณะเหล่านี้, ระบบ Avatar สามารถรองรับการขยายตัวได้ง่ายเมื่อมี Avatar ที่เพิ่มเข้ามาในเกม, ไม่ว่าจะเป็นจำนวน, ลักษณะ, หรือความซับซ้อนทางการทำงาน.
